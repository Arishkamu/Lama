Bsexp: allocate 16!
alloc: current: f7fe9000 16;new current: f7fe9040 
Bsexp: allocate 16!
alloc: current: f7fe9040 16;new current: f7fe9080 
Bsexp: allocate 16!
alloc: current: f7fe9080 16;new current: f7fe90c0 
Bsexp: allocate 16!
alloc: current: f7fe90c0 16;new current: f7fe9100 
Bsexp: allocate 16!
alloc: current: f7fe9100 16;new current: f7fe9140 
Bsexp: allocate 16!
alloc: current: f7fe9140 16;new current: f7fe9180 
Bsexp: allocate 16!
alloc: current: f7fe9180 16;new current: f7fe91c0 
Bsexp: allocate 16!
alloc: call gc: 16

HEAP SNAPSHOT
===================
f_begin = 0xf7fe9000, f_end = 0xf7fe9200,
data at 0xf7fe9000(=>0xf7fe9008): SEXP
	tag(cons) 4 0 
len = 4, new cur = 0xf7fe9040
data at 0xf7fe9040(=>0xf7fe9048): SEXP
	tag(cons) 3 0xf7fe9008 
len = 4, new cur = 0xf7fe9080
data at 0xf7fe9080(=>0xf7fe9088): SEXP
	tag(cons) 2 0xf7fe9048 
len = 4, new cur = 0xf7fe90c0
data at 0xf7fe90c0(=>0xf7fe90c8): SEXP
	tag(cons) 1 0xf7fe9088 
len = 4, new cur = 0xf7fe9100
data at 0xf7fe9100(=>0xf7fe9108): SEXP
	tag(cons) 1 0 
len = 4, new cur = 0xf7fe9140
data at 0xf7fe9140(=>0xf7fe9148): SEXP
	tag(cons) 3 0 
len = 4, new cur = 0xf7fe9180
data at 0xf7fe9180(=>0xf7fe9188): SEXP
	tag(cons) 2 0xf7fe9148 
len = 4, new cur = 0xf7fe91c0

gc: current: f7fbc000; to_space.b = f7fbc000; to_space.e = f7fbc200; f_space.b = f7fe9000; f_space.e = f7fe9200
gc: data is scanned
gc_test_and_copy_root: root ff98e3a0 f7fe9108
gc_copy: f7fe9108 cur = f7fbc000 starts
len1 = 2, len2=848787, len3 = 2
gc_copy: f7fe9108 (f7fe9100) -> f7fbc008 (f7fbc000); new-current = f7fbc040
gc_test_and_copy_root: root ff98e3a4 f7fe90c8
gc_copy: f7fe90c8 cur = f7fbc040 starts
len1 = 2, len2=848787, len3 = 2
gc_copy: f7fe9088 cur = f7fbc080 starts
len1 = 2, len2=848787, len3 = 2
gc_copy: f7fe9048 cur = f7fbc0c0 starts
len1 = 2, len2=848787, len3 = 2
gc_copy: f7fe9008 cur = f7fbc100 starts
len1 = 2, len2=848787, len3 = 2
gc_copy: f7fe9008 (f7fe9000) -> f7fbc108 (f7fbc100); new-current = f7fbc140
copy_elements: fix f7fe9048: f7fbc108
gc_copy: f7fe9048 (f7fe9040) -> f7fbc0c8 (f7fbc0c0); new-current = f7fbc140
copy_elements: fix f7fe9088: f7fbc0c8
gc_copy: f7fe9088 (f7fe9080) -> f7fbc088 (f7fbc080); new-current = f7fbc140
copy_elements: fix f7fe90c8: f7fbc088
gc_copy: f7fe90c8 (f7fe90c0) -> f7fbc048 (f7fbc040); new-current = f7fbc140
gc: end: (allocate!) return f7fbc140; from_space.current f7fbc180; from_space.end 

gc END


HEAP SNAPSHOT
===================
f_begin = 0xf7fbc000, f_end = 0xf7fbc200,
data at 0xf7fbc000(=>0xf7fbc008): SEXP
	tag(cons) 1 0 
len = 4, new cur = 0xf7fbc040
data at 0xf7fbc040(=>0xf7fbc048): SEXP
	tag(cons) 1 0xf7fbc088 
len = 4, new cur = 0xf7fbc080
data at 0xf7fbc080(=>0xf7fbc088): SEXP
	tag(cons) 2 0xf7fbc0c8 
len = 4, new cur = 0xf7fbc0c0
data at 0xf7fbc0c0(=>0xf7fbc0c8): SEXP
	tag(cons) 3 0xf7fbc108 
len = 4, new cur = 0xf7fbc100
data at 0xf7fbc100(=>0xf7fbc108): SEXP
	tag(cons) 4 0 
len = 4, new cur = 0xf7fbc140
data at 0xf7fbc140
printFromSpace: end!
===================

Bsexp: allocate 16!
alloc: current: f7fbc180 16;new current: f7fbc1c0 
Bsexp: allocate 16!
alloc: call gc: 16

HEAP SNAPSHOT
===================
f_begin = 0xf7fbc000, f_end = 0xf7fbc200,
data at 0xf7fbc000(=>0xf7fbc008): SEXP
	tag(cons) 1 0 
len = 4, new cur = 0xf7fbc040
data at 0xf7fbc040(=>0xf7fbc048): SEXP
	tag(cons) 1 0xf7fbc088 
len = 4, new cur = 0xf7fbc080
data at 0xf7fbc080(=>0xf7fbc088): SEXP
	tag(cons) 2 0xf7fbc0c8 
len = 4, new cur = 0xf7fbc0c0
data at 0xf7fbc0c0(=>0xf7fbc0c8): SEXP
	tag(cons) 3 0xf7fbc108 
len = 4, new cur = 0xf7fbc100
data at 0xf7fbc100(=>0xf7fbc108): SEXP
	tag(cons) 4 0 
len = 4, new cur = 0xf7fbc140
data at 0xf7fbc140(=>0xf7fbc148): SEXP
	tag(cons) 6 0 
len = 4, new cur = 0xf7fbc180
data at 0xf7fbc180(=>0xf7fbc188): SEXP
	tag(cons) 5 0xf7fbc148 
len = 4, new cur = 0xf7fbc1c0

gc: current: f7fe9000; to_space.b = f7fe9000; to_space.e = f7fe9200; f_space.b = f7fbc000; f_space.e = f7fbc200
gc: data is scanned
gc_test_and_copy_root: root ff98e394 f7fbc188
gc_copy: f7fbc188 cur = f7fe9000 starts
len1 = 2, len2=848787, len3 = 2
gc_copy: f7fbc148 cur = f7fe9040 starts
len1 = 2, len2=848787, len3 = 2
gc_copy: f7fbc148 (f7fbc140) -> f7fe9048 (f7fe9040); new-current = f7fe9080
copy_elements: fix f7fbc188: f7fe9048
gc_copy: f7fbc188 (f7fbc180) -> f7fe9008 (f7fe9000); new-current = f7fe9080
gc_test_and_copy_root: root ff98e3a0 f7fbc008
gc_copy: f7fbc008 cur = f7fe9080 starts
len1 = 2, len2=848787, len3 = 2
gc_copy: f7fbc008 (f7fbc000) -> f7fe9088 (f7fe9080); new-current = f7fe90c0
gc_test_and_copy_root: root ff98e3a4 f7fbc048
gc_copy: f7fbc048 cur = f7fe90c0 starts
len1 = 2, len2=848787, len3 = 2
gc_copy: f7fbc088 cur = f7fe9100 starts
len1 = 2, len2=848787, len3 = 2
gc_copy: f7fbc0c8 cur = f7fe9140 starts
len1 = 2, len2=848787, len3 = 2
gc_copy: f7fbc108 cur = f7fe9180 starts
len1 = 2, len2=848787, len3 = 2
gc_copy: f7fbc108 (f7fbc100) -> f7fe9188 (f7fe9180); new-current = f7fe91c0
copy_elements: fix f7fbc0c8: f7fe9188
gc_copy: f7fbc0c8 (f7fbc0c0) -> f7fe9148 (f7fe9140); new-current = f7fe91c0
copy_elements: fix f7fbc088: f7fe9148
gc_copy: f7fbc088 (f7fbc080) -> f7fe9108 (f7fe9100); new-current = f7fe91c0
copy_elements: fix f7fbc048: f7fe9108
gc_copy: f7fbc048 (f7fbc040) -> f7fe90c8 (f7fe90c0); new-current = f7fe91c0
gc pre-extend_spaces : f7fe91c0 10 f7fe9200 
extend: 0xf7fbc000 0xf7fe9000 0xf7fbc000 0xf7fe9000
extend: 0xf7fbc200 0xf7fe9200 0xf7fe91c0
gc post-extend_spaces: f7fe91c0 10 f7fe9400 
gc: end: (allocate!) return f7fe91c0; from_space.current f7fe9200; from_space.end 

gc END


HEAP SNAPSHOT
===================
f_begin = 0xf7fe9000, f_end = 0xf7fe9400,
data at 0xf7fe9000(=>0xf7fe9008): SEXP
	tag(cons) 5 0xf7fe9048 
len = 4, new cur = 0xf7fe9040
data at 0xf7fe9040(=>0xf7fe9048): SEXP
	tag(cons) 6 0 
len = 4, new cur = 0xf7fe9080
data at 0xf7fe9080(=>0xf7fe9088): SEXP
	tag(cons) 1 0 
len = 4, new cur = 0xf7fe90c0
data at 0xf7fe90c0(=>0xf7fe90c8): SEXP
	tag(cons) 1 0xf7fe9108 
len = 4, new cur = 0xf7fe9100
data at 0xf7fe9100(=>0xf7fe9108): SEXP
	tag(cons) 2 0xf7fe9148 
len = 4, new cur = 0xf7fe9140
data at 0xf7fe9140(=>0xf7fe9148): SEXP
	tag(cons) 3 0xf7fe9188 
len = 4, new cur = 0xf7fe9180
data at 0xf7fe9180(=>0xf7fe9188): SEXP
	tag(cons) 4 0 
len = 4, new cur = 0xf7fe91c0
data at 0xf7fe91c0
printFromSpace: end!
===================

Bsexp: allocate 16!
alloc: current: f7fe9200 16;new current: f7fe9240 
Bsexp: allocate 16!
alloc: current: f7fe9240 16;new current: f7fe9280 
Bsexp: allocate 16!
alloc: current: f7fe9280 16;new current: f7fe92c0 
Bsexp: allocate 16!
alloc: current: f7fe92c0 16;new current: f7fe9300 
Bsexp: allocate 16!
alloc: current: f7fe9300 16;new current: f7fe9340 
Bsexp: allocate 16!
alloc: current: f7fe9340 16;new current: f7fe9380 
Bsexp: allocate 16!
alloc: current: f7fe9380 16;new current: f7fe93c0 
Bsexp: allocate 16!
alloc: call gc: 16

HEAP SNAPSHOT
===================
f_begin = 0xf7fe9000, f_end = 0xf7fe9400,
data at 0xf7fe9000(=>0xf7fe9008): SEXP
	tag(cons) 5 0xf7fe9048 
len = 4, new cur = 0xf7fe9040
data at 0xf7fe9040(=>0xf7fe9048): SEXP
	tag(cons) 6 0 
len = 4, new cur = 0xf7fe9080
data at 0xf7fe9080(=>0xf7fe9088): SEXP
	tag(cons) 1 0 
len = 4, new cur = 0xf7fe90c0
data at 0xf7fe90c0(=>0xf7fe90c8): SEXP
	tag(cons) 1 0xf7fe9108 
len = 4, new cur = 0xf7fe9100
data at 0xf7fe9100(=>0xf7fe9108): SEXP
	tag(cons) 2 0xf7fe9148 
len = 4, new cur = 0xf7fe9140
data at 0xf7fe9140(=>0xf7fe9148): SEXP
	tag(cons) 3 0xf7fe9188 
len = 4, new cur = 0xf7fe9180
data at 0xf7fe9180(=>0xf7fe9188): SEXP
	tag(cons) 4 0 
len = 4, new cur = 0xf7fe91c0
data at 0xf7fe91c0(=>0xf7fe91c8): SEXP
	tag(cons) 0xf7fe9008 0 
len = 4, new cur = 0xf7fe9200
data at 0xf7fe9200(=>0xf7fe9208): SEXP
	tag(cons) 4 0xf7fe91c8 
len = 4, new cur = 0xf7fe9240
data at 0xf7fe9240(=>0xf7fe9248): SEXP
	tag(cons) 0xf7fe9208 0 
len = 4, new cur = 0xf7fe9280
data at 0xf7fe9280(=>0xf7fe9288): SEXP
	tag(cons) 0xf7fe9188 0xf7fe9248 
len = 4, new cur = 0xf7fe92c0
data at 0xf7fe92c0(=>0xf7fe92c8): SEXP
	tag(cons) 0xf7fe9088 0xf7fe9288 
len = 4, new cur = 0xf7fe9300
data at 0xf7fe9300(=>0xf7fe9308): SEXP
	tag(cons) 4 0 
len = 4, new cur = 0xf7fe9340
data at 0xf7fe9340(=>0xf7fe9348): SEXP
	tag(cons) 3 0xf7fe9308 
len = 4, new cur = 0xf7fe9380
data at 0xf7fe9380(=>0xf7fe9388): SEXP
	tag(cons) 2 0xf7fe9348 
len = 4, new cur = 0xf7fe93c0

gc: current: f7fbc000; to_space.b = f7fbc000; to_space.e = f7fbc400; f_space.b = f7fe9000; f_space.e = f7fe9400
gc: data is scanned
gc_test_and_copy_root: root ff98e398 f7fe9388
gc_copy: f7fe9388 cur = f7fbc000 starts
len1 = 2, len2=848787, len3 = 2
gc_copy: f7fe9348 cur = f7fbc040 starts
len1 = 2, len2=848787, len3 = 2
gc_copy: f7fe9308 cur = f7fbc080 starts
len1 = 2, len2=848787, len3 = 2
gc_copy: f7fe9308 (f7fe9300) -> f7fbc088 (f7fbc080); new-current = f7fbc0c0
copy_elements: fix f7fe9348: f7fbc088
gc_copy: f7fe9348 (f7fe9340) -> f7fbc048 (f7fbc040); new-current = f7fbc0c0
copy_elements: fix f7fe9388: f7fbc048
gc_copy: f7fe9388 (f7fe9380) -> f7fbc008 (f7fbc000); new-current = f7fbc0c0
gc_test_and_copy_root: root ff98e3a0 f7fe92c8
gc_copy: f7fe92c8 cur = f7fbc0c0 starts
len1 = 2, len2=848787, len3 = 2
gc_copy: f7fe9088 cur = f7fbc100 starts
len1 = 2, len2=848787, len3 = 2
gc_copy: f7fe9088 (f7fe9080) -> f7fbc108 (f7fbc100); new-current = f7fbc140
copy_elements: fix f7fe92c8: f7fbc108
gc_copy: f7fe9288 cur = f7fbc140 starts
len1 = 2, len2=848787, len3 = 2
gc_copy: f7fe9188 cur = f7fbc180 starts
len1 = 2, len2=848787, len3 = 2
gc_copy: f7fe9188 (f7fe9180) -> f7fbc188 (f7fbc180); new-current = f7fbc1c0
copy_elements: fix f7fe9288: f7fbc188
gc_copy: f7fe9248 cur = f7fbc1c0 starts
len1 = 2, len2=848787, len3 = 2
gc_copy: f7fe9208 cur = f7fbc200 starts
len1 = 2, len2=848787, len3 = 2
gc_copy: f7fe91c8 cur = f7fbc240 starts
len1 = 2, len2=848787, len3 = 2
gc_copy: f7fe9008 cur = f7fbc280 starts
len1 = 2, len2=848787, len3 = 2
gc_copy: f7fe9048 cur = f7fbc2c0 starts
len1 = 2, len2=848787, len3 = 2
gc_copy: f7fe9048 (f7fe9040) -> f7fbc2c8 (f7fbc2c0); new-current = f7fbc300
copy_elements: fix f7fe9008: f7fbc2c8
gc_copy: f7fe9008 (f7fe9000) -> f7fbc288 (f7fbc280); new-current = f7fbc300
copy_elements: fix f7fe91c8: f7fbc288
gc_copy: f7fe91c8 (f7fe91c0) -> f7fbc248 (f7fbc240); new-current = f7fbc300
copy_elements: fix f7fe9208: f7fbc248
gc_copy: f7fe9208 (f7fe9200) -> f7fbc208 (f7fbc200); new-current = f7fbc300
copy_elements: fix f7fe9248: f7fbc208
gc_copy: f7fe9248 (f7fe9240) -> f7fbc1c8 (f7fbc1c0); new-current = f7fbc300
copy_elements: fix f7fe9288: f7fbc1c8
gc_copy: f7fe9288 (f7fe9280) -> f7fbc148 (f7fbc140); new-current = f7fbc300
copy_elements: fix f7fe92c8: f7fbc148
gc_copy: f7fe92c8 (f7fe92c0) -> f7fbc0c8 (f7fbc0c0); new-current = f7fbc300
gc_test_and_copy_root: root ff98e3a4 f7fe90c8
gc_copy: f7fe90c8 cur = f7fbc300 starts
len1 = 2, len2=848787, len3 = 2
gc_copy: f7fe9108 cur = f7fbc340 starts
len1 = 2, len2=848787, len3 = 2
gc_copy: f7fe9148 cur = f7fbc380 starts
len1 = 2, len2=848787, len3 = 2
gc_copy: f7fe9188 cur = f7fbc3c0 starts
gc_copy: IS_FORWARD_PTR: return! f7fbc188
copy_elements: fix f7fe9148: f7fbc188
gc_copy: f7fe9148 (f7fe9140) -> f7fbc388 (f7fbc380); new-current = f7fbc3c0
copy_elements: fix f7fe9108: f7fbc388
gc_copy: f7fe9108 (f7fe9100) -> f7fbc348 (f7fbc340); new-current = f7fbc3c0
copy_elements: fix f7fe90c8: f7fbc348
gc_copy: f7fe90c8 (f7fe90c0) -> f7fbc308 (f7fbc300); new-current = f7fbc3c0
gc pre-extend_spaces : f7fbc3c0 10 f7fbc400 
extend: 0xf7fe9000 0xf7fbc000 0xf7fe9000 0xf7fbc000
extend: 0xf7fe9400 0xf7fbc400 0xf7fbc3c0
gc post-extend_spaces: f7fbc3c0 10 f7fbc800 
gc: end: (allocate!) return f7fbc3c0; from_space.current f7fbc400; from_space.end 

gc END


HEAP SNAPSHOT
===================
f_begin = 0xf7fbc000, f_end = 0xf7fbc800,
data at 0xf7fbc000(=>0xf7fbc008): SEXP
	tag(cons) 2 0xf7fbc048 
len = 4, new cur = 0xf7fbc040
data at 0xf7fbc040(=>0xf7fbc048): SEXP
	tag(cons) 3 0xf7fbc088 
len = 4, new cur = 0xf7fbc080
data at 0xf7fbc080(=>0xf7fbc088): SEXP
	tag(cons) 4 0 
len = 4, new cur = 0xf7fbc0c0
data at 0xf7fbc0c0(=>0xf7fbc0c8): SEXP
	tag(cons) 0xf7fbc108 0xf7fbc148 
len = 4, new cur = 0xf7fbc100
data at 0xf7fbc100(=>0xf7fbc108): SEXP
	tag(cons) 1 0 
len = 4, new cur = 0xf7fbc140
data at 0xf7fbc140(=>0xf7fbc148): SEXP
	tag(cons) 0xf7fbc188 0xf7fbc1c8 
len = 4, new cur = 0xf7fbc180
data at 0xf7fbc180(=>0xf7fbc188): SEXP
	tag(cons) 4 0 
len = 4, new cur = 0xf7fbc1c0
data at 0xf7fbc1c0(=>0xf7fbc1c8): SEXP
	tag(cons) 0xf7fbc208 0 
len = 4, new cur = 0xf7fbc200
data at 0xf7fbc200(=>0xf7fbc208): SEXP
	tag(cons) 4 0xf7fbc248 
len = 4, new cur = 0xf7fbc240
data at 0xf7fbc240(=>0xf7fbc248): SEXP
	tag(cons) 0xf7fbc288 0 
len = 4, new cur = 0xf7fbc280
data at 0xf7fbc280(=>0xf7fbc288): SEXP
	tag(cons) 5 0xf7fbc2c8 
len = 4, new cur = 0xf7fbc2c0
data at 0xf7fbc2c0(=>0xf7fbc2c8): SEXP
	tag(cons) 6 0 
len = 4, new cur = 0xf7fbc300
data at 0xf7fbc300(=>0xf7fbc308): SEXP
	tag(cons) 1 0xf7fbc348 
len = 4, new cur = 0xf7fbc340
data at 0xf7fbc340(=>0xf7fbc348): SEXP
	tag(cons) 2 0xf7fbc388 
len = 4, new cur = 0xf7fbc380
data at 0xf7fbc380(=>0xf7fbc388): SEXP
	tag(cons) 3 0xf7fbc188 
len = 4, new cur = 0xf7fbc3c0
data at 0xf7fbc3c0
printFromSpace: end!
===================

Barray: create n = 4
alloc: current: f7fbc400 20;new current: f7fbc450 
alloc: current: f7fbc450 8;new current: f7fbc470 
alloc: current: f7fbc470 6;new current: f7fbc488 
0
alloc: current: f7fbc488 8;new current: f7fbc4a8 
alloc: current: f7fbc4a8 17;new current: f7fbc4ec 
{1, 2, 3, 4}
alloc: current: f7fbc4ec 8;new current: f7fbc50c 
alloc: current: f7fbc50c 28;new current: f7fbc57c 
{{1}, {4}, {4, {5, 6}}}
alloc: current: f7fbc57c 8;new current: f7fbc59c 
alloc: current: f7fbc59c 17;new current: f7fbc5e0 
{1, 2, 3, 4}
